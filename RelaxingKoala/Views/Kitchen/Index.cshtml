@model RelaxingKoala.Models.ViewModels.KitchenViewModel
@using RelaxingKoala.Models.Orders
@using RelaxingKoala.Models
@{
    ViewData["Title"] = "Confirmed Orders";
}

<h1>Incoming Orders</h1>

@* View Upcoming Orders *@
<h2>Orders</h2>
<table class="table">
    <thead>
        <tr>
            <th>No.</th>
            <th>Customer</th>
            <th>Menu Items</th>
            <th>Tables</th>
            <th>Type</th>
            <th>State</th>
        </tr>
    </thead>
    <tbody>
        @if (Model == null)
        {
            <h3>No Orders to display</h3>
        }
        else
        {
            @* Display Confirmed, Preparing, Ready  Orders *@
            @for (int i = 0; i < Model.orders.Count(); i++)
            {
                var order = Model.orders[i];
                <tr>
                    <td>@i</td>
                    <td>@order.User?.FirstName</td>

                    @* Display menu items *@
                    <td>
                        <u>
                            @foreach (var m in order.MenuItems)
                            {
                                <li>@m.Name</li>
                            }
                        </u>
                    </td>

                    @* Display table *@
                    <td>
                        <u>
                            @foreach (var t in order.Tables)
                            {
                                <li>Table - @t.Number</li>
                            }
                        </u>
                    </td>
                    <td>@order.Type</td>

                    @* Display State Options *@
                    <td>
                        <select name="select-state" id="@order.Id" onchange="handleOrderState('@order.Id.ToString()', this)">
                            @switch (order.State)
                            {
                                case OrderState.Confirmed:
                                    <option value="@((int) OrderState.Confirmed + 1)" selected="selected">Confirmed</option>
                                    <option value="@((int) OrderState.Preparing + 1)">Preparing</option>
                                    <option value="@((int) OrderState.Ready + 1)">Ready</option>
                                    <option value="@((int) OrderState.Complete + 1)">Complete</option>
                                    break;
                                case OrderState.Preparing:
                                    <option value="@((int) OrderState.Confirmed + 1)">Confirmed</option>
                                    <option value="@((int) OrderState.Preparing + 1)" selected="selected">Preparing</option>
                                    <option value="@((int) OrderState.Ready + 1)">Ready</option>
                                    <option value="@((int) OrderState.Complete + 1)">Complete</option>
                                    break;
                                case OrderState.Ready:
                                    <option value="@((int) OrderState.Confirmed + 1)">Confirmed</option>
                                    <option value="@((int) OrderState.Preparing + 1)">Preparing</option>
                                    <option value="@((int) OrderState.Ready + 1)" selected="selected">Ready</option>
                                    <option value="@((int) OrderState.Complete + 1)">Complete</option>
                                    break;
                                case OrderState.Complete:
                                    <option value="@((int) OrderState.Confirmed + 1)">Confirmed</option>
                                    <option value="@((int) OrderState.Preparing + 1)">Preparing</option>
                                    <option value="@((int) OrderState.Ready + 1)">Ready</option>
                                    <option value="@((int) OrderState.Complete + 1)" selected="selected">Complete</option>
                                    break;
                            }
                        </select>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@* View Menu Items *@
<h2>Menu Item</h2>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Cost</th>
            <th>Availability</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model == null)
        {
            <h3>No Dishes to display</h3>
        }
        else
        {
            @foreach (MenuItem menuitem in Model.menuItems)
            {
                <tr>
                    <td>@menuitem.Id</td>
                    <td>@menuitem.Name</td>
                    <td>@menuitem.Cost</td>
                    <td>
                        <select name="select-availability" id="@menuitem.Id" onchange="handleMenuItemAvailability(@menuitem.Id, this)">
                            @if (menuitem.Availability)
                            {
                                <option value="1" selected="selected"><a>Available</a></option>
                                <option value="0"><a>Unavailable</a></option>
                            }
                            else
                            {
                                <option value="1"><a>Available</a></option>
                                <option value="0" selected="selected"><a>Unavailable</a></option>
                            }
                        </select>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        // OrderState
        function handleOrderState(id, event) {
            const value = event.value;
            console.log(id);
            console.log(value);

            $.ajax({
                url: `/Kitchen/EditOrder`,
                type: 'POST',
                data: {
                    id: id,
                    state: value
                },
                success: function (response) {
                    alert('Update successful');
                },
                error: function () {
                    alert('Update unsuccessful');
                }
            });
        }

        // MenuItem Availability
        function handleMenuItemAvailability(menuitemId, selectedElement) {
            const value = selectedElement.value;
            console.log(menuitemId);
            let available;
            if (value == "1") {
                available = 1;
            } else if (value == "0") {
                available = 0;
            }

            console.log(available);
            $.ajax({
                url: `/Kitchen/EditMenuItem`,
                type: 'POST',
                data: {
                    id: menuitemId,
                    availability: available
                },
                success: function (response) {
                    alert('Update successful');
                },
                error: function () {
                    alert('Update unsuccessful');
                }
            });
        }
    </script>
}